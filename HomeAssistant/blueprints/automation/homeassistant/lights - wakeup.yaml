blueprint:
  name: LIGHT - Wake-up 
  description: 'Alarma para despertar con efecto amanecer.'
  domain: automation
  input:
    light_entity:
      name: Wake-up light entity
      description: Luz a controlar.
      selector:
        entity:
          domain: light
    timestamp_sensor:
      name: Alarm timestamp sensor *
      description: 'Sensor de  alarma'
      selector:
        entity:
          device_class: timestamp
    presence_sensor:
      name: Room Presence Sensor
      description: Sensor de presencia en la habitación.
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
    effect_duration:
      name: Effect Duration
      description: Duracion del efecto.
      default: 10
      selector:
        number:
          min: 5.0
          max: 30.0
          step: 5.0
          unit_of_measurement: min
          mode: slider
    start_brightness:
      name: Start brightness
      description: Brillo al iniciar el efecto.
      default: 5
      selector:
        number:
          min: 1.0
          max: 255.0
          step: 1.0
          mode: slider
    end_brightness:
      name: End brightness
      description: Brillo al finalizar el efecto.
      default: 254
      selector:
        number:
          min: 5.0
          max: 255.0
          step: 1.0
          mode: slider
    min_mired:
      name: Minimum color temperature
      description: Temperatura de color minima.
      default: 5
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 5.0
          mode: slider
          unit_of_measurement: mired
    pre_sunrise_actions:
      name: Pre-sunrise actions
      description: Acción a ejecutar antes de. (opcional).
      default: []
      selector:
        action: {}
    post_sunrise_actions:
      name: Post-sunrise actions
      description: Acción a ejecutar después de. (opcional)
      default: []
      selector:
        action: {}

variables:
  light_entity: !input 'light_entity'
  sensor: !input 'timestamp_sensor'
  presence_sensor: !input 'presence_sensor'
  effect_duration: !input 'effect_duration'
  start_brightness: !input 'start_brightness'
  end_brightness: !input 'end_brightness'

  range_brightness: '{{float(end_brightness)-float(start_brightness)}}'
  seconds: '{{float(effect_duration) * 60}}'
  min_mired: !input 'min_mired'
  start_mired: '{{state_attr(light_entity, ''max_mireds'')}}'
  end_mired: '{{[state_attr(light_entity, ''min_mireds'')|int(0), min_mired|int(0)]|max}}'
  tick_time: '{{float(seconds) / float(range_brightness)}}'

trigger:
- platform: time_pattern
  minutes: "*"
condition: []
action:
- wait_template: '{{sensor == ''none'' or as_timestamp(states(sensor), None) != None}}'
- wait_template: '{{0 < as_timestamp(states(sensor)) - as_timestamp(now()) <= float(seconds) and states(presence_sensor)
    in [''unknown'', ''on'', ''home'']}}'
- choose: []
  default: !input 'pre_sunrise_actions'
- condition: template
  value_template: '{{sensor == ''none'' or as_timestamp(states(sensor), None) != None}}'
- condition: template
  value_template: '{{0 < as_timestamp(states(sensor)) - as_timestamp(now()) <= float(seconds) and states(presence_sensor)
    in [''unknown'', ''on'', ''home'']}}'
- choose:
  - conditions:
    - '{{state_attr(light_entity, ''min_mireds'') != None}}'
    sequence:
    - service: light.turn_on
      data:
        brightness: '{{start_brightness}}'
        color_temp: '{{start_mired}}'
      entity_id: !input 'light_entity'
  default:
  - service: light.turn_on
    data:
      brightness: '{{start_brightness}}'
    entity_id: !input 'light_entity'
- repeat:
    while:
    - '{{sensor == ''none'' or as_timestamp(states(sensor), None) != None}}'
    - '{{0 < as_timestamp(states(sensor)) - as_timestamp(now()) <= float(seconds)}}'
    sequence:
    - delay: '{{tick_time}}'
    - choose:
      - conditions:
        - '{{0 < state_attr(light_entity, ''brightness'') | int(0) < end_brightness |
          int}}'
        - '{{sensor == ''none'' or as_timestamp(states(sensor), None) != None}}'
        - '{{0 < as_timestamp(states(sensor)) - as_timestamp(now()) <= float(seconds)}}'
        sequence:
        - choose:
          - conditions:
            - '{{state_attr(light_entity, ''min_mireds'') != None}}'
            sequence:
            - service: light.turn_on
              data:
                brightness: '{{(float(end_brightness) - (float(range_brightness) *
                  (as_timestamp(states(sensor)) - as_timestamp(now())) / float(seconds)))
                  | int(0)}}'
                color_temp: '{{(float(end_mired) + (float(start_mired) - float(end_mired))
                  * ((as_timestamp(states(sensor)) - as_timestamp(now())) / float(seconds)))
                  | int(0)}}'
              entity_id: !input 'light_entity'
          default:
          - service: light.turn_on
            data:
              brightness: '{{(float(end_brightness) - (float(range_brightness) * (as_timestamp(states(sensor))
                - as_timestamp(now())) / float(seconds))) | int(0)}}'
            entity_id: !input 'light_entity'
- choose: []
  default: !input 'post_sunrise_actions'
mode: single
max_exceeded: silent