blueprint:
  name: LIGHT - Movie Time
  description: >
    # ♾️ Movie time
    
    **Version: 1.8**

    A continuación se muestran algunos ejemplos de cómo se puede utilizar la automatización:

      - Medios (Sala de cine): enciende diferentes luces cuando miras una película.
      - Alarma de la casa: enciende las luces cuando se haya activado la alarma de tu casa.
      - Detector de humo: Encienda las luces y los extractores de aire cuando se haya activado el detector de humo.
    
    
    <details>
    <summary><b>Cómo funciona:</b> - Click here to expand</summary>

      - **Inicio de la película (reproduciendo):**
        - Las luces, interruptores y escenas se activan en un modo de película.
        - También puede especificar la aplicación utilizada en el reproductor multimedia (por ejemplo, Apple TV, Netflix, etc.)
          y activar la automatización solo si se utilizan estas aplicaciones.
        - Puedes seleccionar qué luces e interruptores se apagarán al comienzo de la película.
        - Puedes optar por crear una instantánea de tus luces e interruptores antes de que comience la película,
          lo que te permitirá devolverlos a su estado original una vez que termine la película.
      
      - **Tiempo de retardo:**
        - El tiempo de retardo es un período de buffer antes de que la automatización se apague o entre en un modo intermedio.
          Proporciona un período de gracia para rectificar acciones accidentales.

      - **Intermedio:**
        - El intervalo permite realizar ajustes de iluminación versátiles, incluido encender diferentes luces, ajustar los niveles de brillo,
          cambiar la configuración de temperatura del color o seleccionar escenas específicas.
          Es particularmente útil para configurar luces ligeramente más brillantes durante un descanso intermedio al pausar una película.

      - **Fin de la película:**
        - Cuando termina la película, todas las luces, interruptores y escenas se apagan.
          Alternativamente, si está utilizando la opción de enlace de automatización,
          la automatización de la luz del sensor se activará, devolviendo las luces a la configuración de automatización de la luz del sensor.
        - Opcionalmente, puede seleccionar luces, interruptores y escenas que se encenderán después de que termine la película.
        - Si has elegido crear una instantánea de tus luces e interruptores al principio, volverán a su estado original cuando termine la película.

      - **Opción de enlace de automatización:**
        - La "Opción de enlace de automatización" se integra perfectamente con otros planos, como el "Plano de luz del sensor",
          lo que le permite desactivar automatizaciones adicionales cuando se activa una película.
          Esta función toma el control de las luces, los interruptores, las escenas y los guiones, lo que garantiza una experiencia cinematográfica fluida.
          Una vez que termina la película, las demás automatizaciones se vuelven a habilitar, restableciendo las luces, interruptores, escenas y guiones a su funcionamiento normal.

      - **Accionamiento manual:**
        - Utilice "Opciones de derivación" para anular manualmente los sensores de activación, lo que proporciona control manual y personalización adicional.

      - **Opciones de elevación del sol:**
        - Implementar "Elevación del Sol" para restringir la automatización a condiciones más oscuras alineadas con la posición del sol.

      - **Opciones de detección de luz ambiental:**
        - Configure un sensor de luz ambiental para activarlo en condiciones de poca luz, personalizable con valores de LUX específicos.
        
    </details>
    
  domain: automation
  input:
    trigger_entities:
      name: Media Player, House Alarm, Smoke Alarm, Etc*
      description: Elemento que controla los cambios de estado de luces, interruptores y escenas.
      selector:
        entity:
          multiple: true
    include_sun:
      name: Use The Sun Option (Optional)
      description: Permite que la automatización se ejecute cuando está oscuro o por debajo de la configuración de 'Elevación del sol'.
        No es necesario habilitar esta opción para que funcione la condición de elevación del sol de las luces nocturnas.
      default: sun_disabled
      selector:
        select:
          options:
            - label: Enable the sun option
              value: "sun_enabled"
            - label: Disable the sun option
              value: "sun_disabled"
    sun_elevation:
      name: Sun Elevation Falling
      description: La caída del sol se refiere al ángulo entre el sol y el horizonte cuando el sol se pone.
        Un valor negativo indica que el sol está DEBAJO del horizonte. Por ejemplo, una guía de configuración de -1,5 corresponde al anochecer.
      default: -1.5
      selector:
        number:
          min: -10
          max: 5
          step: 0.5
          unit_of_measurement: degrees
    sun_elevation_rising:
      name: Sun Elevation Rising
      description: La elevación del sol ascendente se refiere al ángulo entre el sol y el horizonte durante el amanecer.
        Un valor negativo indica que el sol está DEBAJO del horizonte. Por ejemplo, una guía de ajuste de -4,0 corresponde al amanecer.
      default: -4.0
      selector:
        number:
          min: -10
          max: 5
          step: 0.5
          unit_of_measurement: degrees
    trigger_on_state:
      name: ON State - trigger
      description: Estados de activación inicial.
        Si el estado que desea no aparece en la lista, simplemente escríbalo y presione Intro.
      default: playing
      selector:
        select:
          multiple: true
          custom_value: true
          options:
            - label: ON.
              value: "on"
            - label: Playing
              value: "playing"

    app_attribute:
      name: ON State - APP start Option (Optional)
      description: Puede seleccionar las aplicaciones utilizadas en el reproductor multimedia (por ejemplo, Apple TV, Netflix, etc.)
        que activarán la automatización.
      default: []
      selector:
        select:
          multiple: true
          custom_value: true
          sort: true
          options:
            - label: Amazon Prime - Chromecast
              value: Prime Video
            - label: Netflix - Chromecast
              value: Netflix
            - label: Plex - Chromecast
              value: Plex
            - label: YouTube - Chromecast
              value: YouTube
            - label: YouTube TV - Chromecast
              value: YouTube TV

    time_delay:
      name: Time Delay
      description: Retraso de tiempo que actúa como amortiguador antes de que la automatización se apague o entre en modo INTERMEDIO.
      default: 1.5
      selector:
        number:
          min: 0
          max: 10
          step: 0.5
          unit_of_measurement: seconds

    light_switch:
      name: ON State - Turn ON Lights, Switches, Scenes *
      description: Luces, interruptores y escenas que se activan al inicio de la automatización.

        **NOTA** - No se admiten áreas ni dispositivos.
      selector:
        target:
          entity:
            domain: 
              - light
              - switch
              - scene
              - binary_sensor
    end_scenes:
      name: ON State - Scenes To Turn OFF
      description: Si ha optado por activar una escena en "Luces - Interruptores - Escenas" o
        Secciones "Intermedio - Luces - Interruptores - Escenas" y deseo que las entidades se apaguen después,
        necesitarás crear una escena adicional. Esta escena debe incluir todas las entidades (por ejemplo, luces, interruptores, etc.)
        utilizados en esas escenas, asegurándose de que estén APAGADOS. Luego ingrese la escena aquí.
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain:
              - scene

    include_light_control:
      name: ON State - Turn ON Light Options (Optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Use brightness
              value: "use_brightness"
            - label: Use colour temperature
              value: "use_colour_temperature"
            - label: Use transition
              value: "use_transition"
    light_brightness:
      name: ON State - Brightness
      default: 10
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          step: 5
          unit_of_measurement: '%'

    light_colour_temperature:
      name: ON State - Colour Temperature
      default: 2500
      selector:
        number:
          min: 2000
          max: 8000
          mode: slider
          step: 100
          unit_of_measurement: 'kelvin'

    light_transition_on:
      name: ON State - Transition - OFF --> ON
      default: 2
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds

    light_transition_off:
      name: ON State -Transition - ON --> OFF
      default: 1.5
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds

    include_start_turn_off:
      name: ON State - Turn OFF Option (Optional)
      description: Luces y/o Interruptores que se APAGARAN cuando se inicia la automatización por primera vez. 
      default: disable_start_turn_off
      selector:
        select:
          options:
            - label: Enable the start turn OFF options
              value: "enable_start_turn_off"
            - label: Disable the start turn OFF options
              value: "disable_start_turn_off"
    
    off_light_switch:
      name: ON State - Turn OFF Lights/Switches
      description: luces y/o Interruptores que se APAGARAN cuando se inicie la automatización por primera vez.

        **NOTA** - No se admiten áreas ni dispositivos.
      default: {}
      selector:
        target:
          entity:
            domain: 
              - light
              - switch

    off_include_light_control:
      name: ON State -  Turn OFF Light Options (Optional)
      description: Utilizar la transición de apagado (luces).
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Use transition
              value: "use_transition"
    off_light_transition_off:
      name: ON State - Turn OFF Transition
      description: Tiempo de transición de apagado.
      default: 1.5
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds

    include_intermission:
      name: INTERMEDIO State - Option (Optional)
      description: Ajustes de iluminación en modo INTERMEDIO.
      default: intermission_enable
      selector:
        select:
          options:
            - label: Enable intermission option
              value: "intermission_enable"
            - label: Disable intermission option
              value: "intermission_disable"

    intermission_state:
      name: INTERMEDIO State - Trigger
      description: Estado que activa el modo INTERMEDIO.
        Si el estado que desea no aparece en la lista, simplemente escríbalo y presione Intro.
        
        **Nota** - la selección no puede coincidir con las opciones elegidas en las secciones 'Estado ENCENDIDO' o 'Estado APAGADO'.
      default: paused
      selector:
        select:
          multiple: true
          custom_value: true
          options:
            - label: Paused
              value: "paused"

    intermission_light_switch:
      name: INTERMEDIO State - Turn ON Lights, Switches, Scenes
      description: Las luces, interruptores y/o escenas que se activarán durante el modo INTERMEDIO.

        **NOTA** - Sólo puedes utilizar entidades. No se admiten áreas ni dispositivos.
      default: {}
      selector:
        target:
          entity:
            domain: 
              - light
              - switch
              - scene

    intermission_end_scenes:
      name: INTERMEDIO State - Turn OFF Scenes
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain:
              - scene

    intermission_include_light_control:
      name: INTERMEDIO State - Light Options (Optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Use brightness
              value: "use_brightness"
            - label: Use colour temperature
              value: "use_colour_temperature"
            - label: Use transition
              value: "use_transition"

    intermission_light_brightness:
      name: INTERMEDIO State - Brightness
      default: 10
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          step: 10
          unit_of_measurement: '%'

    intermission_light_colour_temperature:
      name: INTERMEDIO State - Colour Temperature
      default: 5000
      selector:
        number:
          min: 2000
          max: 8000
          mode: slider
          step: 100
          unit_of_measurement: 'kelvin'
    
    intermission_light_transition_on:
      name: INTEREMDIO State - Transition  OFF --> ON
      default: 2
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds
    
    intermission_light_transition_off:
      name: INTERMEDIO State - Transition  ON --> OFF
      default: 2
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds

    trigger_off_state:
      name: END State - Trigger
      description: Estados de desactivación.
        Si el estado que desea no aparece en la lista, simplemente escríbalo y presione Enter.
      default: 'off'
      selector:
        select:
          multiple: true
          custom_value: true
          options:
            - label: OFF.
              value: "off"
            - label: Idle
              value: "idle"
            - label: Paused
              value: "paused"
            - label: Standby
              value: "standby"

    include_end_turn_on:
      name: END State - Turn ON Options (Optional)
      description: Las luces, interruptores y escenas que se activarán cuando finalice la automatización.
      default: disable_end_turn_on
      selector:
        select:
          options:
            - label: Enable to create a snapshot - Lights - Switches
              value: "enable_end_turn_on_snapshot"
            - label: Enable to turn ON - Lights - Switches - Scenes
              value: "enable_end_turn_on"
            - label: Disable, end turn ON options
              value: "disable_end_turn_on"

    end_snapshot_name:
      name: END State - Turn ON Snapshot Name
      description: Si ha elegido crear una instantánea de sus luces e interruptores arriba, asegúrese de proporcionar un nombre único para la instantánea.
        Cada automatización que cree utilizando este modelo con instantáneas debe tener un nombre de instantánea único que cree aquí.
      
        
        **Nota** - El nombre debe estar todo en minúsculas y, si desea un espacio, debe ser "_". Ejemplo "antes" o "lights_before_movie"
      default: enter_unique_snapshot_name_here
      selector:
        text:
    end_snapshot_helper:
      name: END State - Turn ON Snapshot Toggle Helper
      description: Si ha seleccionado crear una instantánea de sus luces e interruptores arriba, debe crear un asistente de alternancia e ingresarlo aquí.
        El asistente de conmutación debe estar en estado APAGADO cuando se inicia la automatización.
      default: []
      selector:
        entity:
          filter:
            domain:
              - input_boolean
    end_light_switch:
      name: END State - Turn ON Lights, Switches, Scenes
      description: Especifica las luces, interruptores y escenas que deseas activar al final de esta automatización.

        **NOTA** - Sólo puedes utilizar entidades. No se admiten áreas ni dispositivos.
      default: {}
      selector:
        target:
          entity:
            domain: 
              - light
              - switch
              - scene
              - binary_sensor

    end_include_light_control:
      name: END State - Turn ON Light Options (Optional)
      description: Seleccione si desea utilizar brillo, temperatura de color o transición.
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Use brightness
              value: "use_brightness"
            - label: Use colour temperature
              value: "use_colour_temperature"
            - label: Use transition
              value: "use_transition"
    end_light_brightness:
      name: END State - Turn ON Brightness
      description: Brillo de las luces al finalizar la automatización.
      default: 100
      selector:
        number:
          min: 0
          max: 100
          mode: slider
          step: 10
          unit_of_measurement: '%'
    end_light_colour_temperature:
      name: END State - Turn ON Colour Temperature
      description: Temperatura de color de las luces al finalizar la automatización.
      default: 5000
      selector:
        number:
          min: 2000
          max: 8000
          mode: slider
          step: 100
          unit_of_measurement: 'kelvin'
    end_light_transition_on:
      name: END State - Transition  OFF --> ON
      description: Transición para las luces al finalizar la automatización.
      default: 1
      selector:
        number:
          min: 0
          max: 5
          mode: slider
          step: 0.5
          unit_of_measurement: seconds

    include_automation_link:
      name: Automation Link Option (Optional)
      description: Esta función le permite desactivar automáticamente otras automatizaciones, lo que puede resultar especialmente útil
        si estás utilizando otro plano mío (por ejemplo, '[Sensor Light](https://community.home-assistant.io/t/481048))
        para gestionar luces, interruptores o escenas y desea desactivarlo cuando esta automatización está activa.
        
        
        Para obtener más información sobre cómo utilizar la opción de enlace de automatización [Haga clic aquí](https://community.home-assistant.io/t/591824/4?u=blacky)
      default: disable_automation_link
      selector:
        select:
          options:
            - label: Enable automation link
              value: "enable_automation_link"
            - label: Disable automation link
              value: "disable_automation_link"

    automation_link:
      name: Automation Link - By-pass Control
      description: Ingrese las otras automatizaciones que le gustaría deshabilitar cuando esta automatización esté ACTIVADA.
        Para hacer esto tus otras automatizaciones deben incluir un interruptor de bypass que ingresas aquí.
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain:
              - input_boolean
    
    include_ambient:
      name: Use The Ambient Options (Optional)
      description: Esta opción se usa para agregar una condición que solo permite que la automatización se ejecute cuando está oscuro o debajo de la configuración de "Ambiente".
        Es una condición global que puede funcionar junto con otras opciones.
      default: ambient_disabled
      selector:
        select:
          options:
            - label: Enable the ambient options
              value: "ambient_enabled"
            - label: Disable the ambient options
              value: "ambient_disabled"
    ambient_light_sensor:
      name: Ambient Light Sensor
      description: Seleccione el sensor ambiental que se utilizará.
      default: []
      selector:
        entity:
          filter:
            domain: sensor
            device_class: illuminance
    ambient_light_options:
      name: Ambient Light Sensor - Site Conditions
      description: En algunos casos, cuando las luces se ENCIENDEN, el sensor de luz ambiental se ve afectado, aumentando su valor LUX.
        Esto puede hacer que las luces se apaguen prematuramente. Seleccione la opción que mejor se adapte a su instalación.
        
        
        **NOTA** - Si utiliza una compensación entre el valor de lux alto y bajo, seleccione NO.
      default: ambient_light_option_disabled
      selector:
        select:
          options:
            - label: YES - My Ambient Light Sensor is affected by the Lights
              value: "ambient_light_option_enabled"
            - label: NO - My Ambient Light Sensor is not affected by the Lights
              value: "ambient_light_option_disabled"
    ambient_light_value:
      name: Ambient Light - Low Lux Value
      description: Establezca el valor de Lux bajo de luz ambiental. La luz se encenderá cuando el nivel de lux esté por debajo del valor establecido.
        Este valor debe ser igual o inferior al "Valor alto de lux" que aparece a continuación. La guía es de 20 lux (anochecer).
      default: 20
      selector:
        number:
          min: 0
          max: 500
          step: 10
          unit_of_measurement: lux
    ambient_light_high_value:
      name: Ambient Light - High Lux Value
      description: Establezca el valor de lux alto de luz ambiental. La luz se apagará cuando el nivel de lux esté por encima del valor establecido.
        Este valor debe ser igual o superior al "Valor bajo de lux" anterior.
        Establecer un valor superior al valor bajo permite una compensación. La guía es de 80 lux (amanecer).
      default: 80
      selector:
        number:
          min: 0
          max: 1000
          step: 10
          unit_of_measurement: lux
    scene_toggle_helper:
      name: Ambient Light - Scenes Toggle Helper 
      description: Para garantizar el buen funcionamiento de la automatización, se recomienda crear un asistente de alternancia separado específicamente para habilitar las opciones ambientales.
        Este paso solo es necesario si ha ingresado escenas sin ninguna entidad en 'Luces - Interruptores - Escenas' o 'Intermedio - Luces - Interruptores - Escenas' arriba.
      default: []
      selector:
        entity:
          filter:
            domain:
              - input_boolean
    include_bypass:
      name: Use The By-pass Options (Optional)
      description: Seleccione si desea habilitar una opción.
        Cada opción deshabilitará esta automatización, pero altera su comportamiento activando la entidad de enlace de automatización,
        encender la automatización, apagarla o pausarla manteniendo su estado actual
        cuando el bypass está activado.
      default: bypass_disabled
      selector:
        select:
          options:
            - label: 1 - Enable the By-pass - Turn automation link entity ON
              value: "bypass_enabled_linked_automations"
            - label: 2 - Enable the By-pass - Turn automation ON
              value: "bypass_enabled_turn_on_automations"
            - label: 3 - Enable the By-pass - Turn automation OFF
              value: "bypass_enabled_turn_off_automations"
            - label: 4 - Enable the By-pass - Pause automation
              value: "bypass_enabled_pause_automation"
            - label: Disable the By-pass option
              value: "bypass_disabled"
    trigger_bypass:
      name: By-pass - Switch
      description: Seleccione un interruptor que anulará (deshabilitará) la automatización.
        Esta entidad no se puede incluir en las selecciones "Luces - Interruptores - Escenas" y/o "Intermedio - Luces - Interruptores - Escenas".
      default: []
      selector:
        entity:

mode: restart
max_exceeded: silent

variables:
  trigger_entities: !input trigger_entities
  trigger_on_state: !input trigger_on_state
  app_attribute: !input app_attribute
  trigger_off_state: !input trigger_off_state
  light_switch: !input light_switch
  end_scenes: !input end_scenes
  time_delay: !input time_delay
  include_light_control: !input include_light_control
  light_brightness: !input light_brightness
  brightness_value: "{{ iif ('use_brightness' in include_light_control , light_brightness, ) }}"
  light_colour_temperature: !input light_colour_temperature
  temperature_value: "{{ iif ('use_colour_temperature' in include_light_control , light_colour_temperature, [] ) }}"
  light_transition_on: !input light_transition_on
  light_transition_off: !input light_transition_off
  transition_on_value: "{{ iif ('use_transition' in include_light_control, light_transition_on, ) }}"
  transition_off_value: "{{ iif ('use_transition' in include_light_control, light_transition_off, ) }}"
  include_start_turn_off: !input include_start_turn_off
  off_light_switch: !input off_light_switch
  off_include_light_control: !input off_include_light_control
  off_light_transition_off: !input off_light_transition_off
  off_transition_off_value: "{{ iif ('use_transition' in off_include_light_control, off_light_transition_off, ) }}"
  include_intermission: !input include_intermission
  intermission_state: !input intermission_state
  intermission_light_switch: !input intermission_light_switch
  intermission_end_scenes: !input intermission_end_scenes
  intermission_include_light_control: !input intermission_include_light_control
  intermission_light_brightness: !input intermission_light_brightness
  intermission_brightness_value: "{{ iif ('use_brightness' in intermission_include_light_control , intermission_light_brightness, ) }}"
  intermission_light_colour_temperature: !input intermission_light_colour_temperature
  intermission_temperature_value: "{{ iif ('use_colour_temperature' in intermission_include_light_control , intermission_light_colour_temperature, [] ) }}"
  intermission_light_transition_on: !input intermission_light_transition_on
  intermission_light_transition_off: !input intermission_light_transition_off
  intermission_transition_on_value: "{{ iif ('use_transition' in intermission_include_light_control, intermission_light_transition_on, ) }}"
  intermission_transition_off_value: "{{ iif ('use_transition' in intermission_include_light_control, intermission_light_transition_off, ) }}"
  include_end_turn_on: !input include_end_turn_on
  end_snapshot_name: !input end_snapshot_name
  end_snapshot_helper: !input end_snapshot_helper
  end_light_switch: !input end_light_switch
  end_include_light_control: !input end_include_light_control
  end_light_brightness: !input end_light_brightness
  end_brightness_value: "{{ iif ('use_brightness' in end_include_light_control , end_light_brightness, ) }}"
  end_light_colour_temperature: !input end_light_colour_temperature
  end_temperature_value: "{{ iif ('use_colour_temperature' in end_include_light_control , end_light_colour_temperature, [] ) }}"
  end_light_transition_on: !input end_light_transition_on
  end_transition_on_value: "{{ iif ('use_transition' in end_include_light_control, end_light_transition_on, ) }}"
  include_automation_link: !input include_automation_link
  automation_link: !input automation_link
  include_sun: !input include_sun
  sun_elevation: !input sun_elevation
  sun_elevation_rising: !input sun_elevation_rising
  include_ambient: !input include_ambient
  ambient_light_sensor: !input ambient_light_sensor
  ambient_light_options: !input ambient_light_options
  ambient_light_value: !input ambient_light_value
  ambient_light_high_value: !input ambient_light_high_value
  scene_toggle_helper: !input scene_toggle_helper
  include_bypass: !input include_bypass
  trigger_bypass: !input trigger_bypass

# Split domains for light switch targets

  light_entities: "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}"
  switch_entities: "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}"
  scene_entities: "{{ expand(light_switch.entity_id) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}"

# Split domains for OFF light switch targets and check entities are ON - exclude scenes as they have no off state

  off_light_entities_on: >-
    {% set a =  off_light_switch and off_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  off_switch_entities_on: >-
    {% set a =  off_light_switch and off_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

# Split domains for end light switch targets

  end_scene_create: >-
    {% set a =  end_light_switch and end_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  end_light_entities: >-
    {% set a =  end_light_switch and end_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  end_switch_entities_off: >-
    {% set a =  end_light_switch and end_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  end_scene_entities: >-
    {% set a =  end_light_switch and end_light_switch.entity_id %}
    {% if a %}
      {{ expand(a) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

# Split domains for intermission light switch target and check entities are OFF - exclude scenes as they have no off state

  intermission_light_entities_off: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | selectattr('domain', 'eq', 'light') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  intermission_switch_entities_off: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | selectattr('domain', 'eq', 'switch') | selectattr('state', 'eq', 'off') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

# Split domains for intermission light switch target

  intermission_light_entities: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  intermission_switch_entities: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  intermission_scene_entities: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | selectattr('domain', 'eq', 'scene') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

# Set up crossover lights for T5 trigger. This is to stop the light flicker & turn off entities not required in each domain, light & switches - only works for entities

  crossover_light: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  crossover_switch: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(a) | reject('in', expand(b)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

# Set up crossover lights for T8 trigger. This is to stop the light flicker & turn off entities not required in each domain, light & switches - only works for entities

  crossover_intermission_light: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'light') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}
  crossover_intermission_switch: >-
    {% set a = light_switch.entity_id %}
    {% set b =  intermission_light_switch and intermission_light_switch.entity_id %}
    {% if a and b %}
      {{ expand(b) | reject('in', expand(a)) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}
    {% else %}
      []
    {% endif %}

trigger:
  - platform: state
    id: "t0"
    entity_id: !input trigger_entities
    to: !input trigger_on_state
  - platform: state
    id: "t1"
    entity_id: !input trigger_entities
    to: !input intermission_state
  - platform: state
    id: "t2"
    entity_id: !input trigger_bypass
    from: "off"
    to: "on"
  - platform: state
    id: "t3"
    entity_id: !input trigger_bypass
    from: "on"
    to: "off"
  - platform: numeric_state
    id: "t4"
    entity_id: sun.sun
    attribute: elevation
    below: !input sun_elevation
  - platform: numeric_state
    id: "t5"
    entity_id: sun.sun
    attribute: elevation
    above: !input sun_elevation_rising
  - platform: numeric_state
    id: "t6"
    entity_id: !input ambient_light_sensor
    below: !input ambient_light_value
  - platform: numeric_state
    id: "t7"
    entity_id: !input ambient_light_sensor
    above: !input ambient_light_high_value

# All Conditions
condition:
#Trigger conditions
  - condition: or
    conditions:
      - condition: and # trigger from off to on
        conditions:
          - condition: state
            entity_id: !input trigger_entities
            match: any
            state: !input trigger_on_state
          - condition: trigger
            id: 't0'
      - condition: and # trigger by by-pass turning on
        conditions:
          - condition: trigger
            id: 't1'
          - "{{ include_intermission == 'intermission_enable' }}"
      - condition: and # trigger by by-pass turning on
        conditions:
          - condition: trigger
            id: 't2'
          - "{{ (include_bypass == 'bypass_enabled_linked_automations') or (include_bypass == 'bypass_enabled_turn_on_automations') or (include_bypass == 'bypass_enabled_turn_off_automations') or (include_bypass == 'bypass_enabled_pause_automation') }}"
      - condition: and # trigger by by-pass turning off
        conditions:
          - condition: trigger
            id: 't3'
          - "{{ (include_bypass == 'bypass_enabled_linked_automations') or (include_bypass == 'bypass_enabled_turn_on_automations') or (include_bypass == 'bypass_enabled_turn_off_automations') or (include_bypass == 'bypass_enabled_pause_automation') }}"
      - condition: or # trigger by Falling sun & check trigger state
        conditions:
          - condition: and
            conditions:
            - condition: trigger
              id: 't4'
            - "{{ include_sun == 'sun_enabled' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input trigger_on_state
          - condition: and
            conditions:
            - condition: trigger
              id: 't4'
            - "{{ include_sun == 'sun_enabled' }}"
            - "{{ include_intermission == 'intermission_enable' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input intermission_state
      - condition: or # trigger by rising sun & check trigger state
        conditions:
          - condition: and
            conditions:
            - condition: trigger
              id: 't5'
            - "{{ include_sun == 'sun_enabled' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input trigger_on_state
          - condition: and
            conditions:
            - condition: trigger
              id: 't5'
            - "{{ include_sun == 'sun_enabled' }}"
            - "{{ include_intermission == 'intermission_enable' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input intermission_state
      - condition: or # trigger by falling in ambient & check trigger state
        conditions:
          - condition: and
            conditions:
            - condition: trigger
              id: 't6'
            - "{{ include_ambient == 'ambient_enabled' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input trigger_on_state
          - condition: and
            conditions:
            - condition: trigger
              id: 't6'
            - "{{ include_ambient == 'ambient_enabled' }}"
            - "{{ include_intermission == 'intermission_enable' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input intermission_state
      - condition: or # trigger by rising ambient, site condition set to NO & check trigger state
        conditions:
          - condition: and
            conditions:
            - condition: trigger
              id: 't7'
            - "{{ include_ambient == 'ambient_enabled' }}"
            - "{{ ambient_light_options == 'ambient_light_option_disabled' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input trigger_on_state
          - condition: and
            conditions:
            - condition: trigger
              id: 't7'
            - "{{ include_ambient == 'ambient_enabled' }}"
            - "{{ ambient_light_options == 'ambient_light_option_disabled' }}"
            - "{{ include_intermission == 'intermission_enable' }}"
            - condition: state
              entity_id: !input trigger_entities
              match: any
              state: !input intermission_state

# Media App
  - condition: or
    conditions:
      - "{{ app_attribute == [] }}"
      - condition: state # For Apple TV, PlayStation, Amazon Fire TV
        entity_id: !input trigger_entities
        attribute: app_id
        state: !input app_attribute
      - condition: state # For Chromecast TV apps, Apple TV if used
        entity_id: !input trigger_entities
        attribute: app_name
        state: !input app_attribute
      - condition: state # For PlayStation
        entity_id: !input trigger_entities
        attribute: media_content_type
        state: !input app_attribute
      - condition: trigger
        id: 
          - 't2'
          - 't3'

# Check Trigger By-pass
  - condition: or
    conditions:
      - "{{ include_bypass == 'bypass_disabled' }}"
      - "{{ trigger_bypass == [] }}"
      - "{{ (include_bypass == 'bypass_enabled_linked_automations') and (states[trigger_bypass].state == 'off') }}"
      - "{{ (include_bypass == 'bypass_enabled_turn_on_automations') and (states[trigger_bypass].state == 'off') }}"
      - "{{ (include_bypass == 'bypass_enabled_turn_off_automations') and (states[trigger_bypass].state == 'off') }}"
      - "{{ (include_bypass == 'bypass_enabled_pause_automation') and (states[trigger_bypass].state == 'off') }}"
      - condition: trigger
        id: 't2'

# Check Sun Elevation
  - condition: or
    conditions:
      - "{{ include_sun == 'sun_disabled' }}"
      - "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', false)) and (state_attr('sun.sun','elevation') <= sun_elevation | float(90)) }}"
      - "{{ (include_sun == 'sun_enabled') and (is_state_attr('sun.sun', 'rising', true)) and (state_attr('sun.sun','elevation') <= sun_elevation_rising | float(90)) }}"
      - condition: trigger
        id: 't5'

# Check Ambient Light Sensor
  - condition: or
    conditions:
      - "{{ include_ambient == 'ambient_disabled' }}"
      - "{{ ambient_light_sensor == [] }}"
      - "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_value | int) }}"
      - "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}"
      - "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) and ((include_intermission == 'intermission_enable') and (expand(intermission_light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}"
      - "{{ (ambient_light_options == 'ambient_light_option_enabled') and (expand(light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0) }}"
      - "{{ (ambient_light_options == 'ambient_light_option_enabled') and ((include_intermission == 'intermission_enabled') and (expand(intermission_light_switch.entity_id) | selectattr('state', '==', 'on') | list | count > 0)) }}"
      - condition: and
        conditions:
          - "{{ (include_ambient == 'ambient_enabled') and (states[ambient_light_sensor].state | int < ambient_light_high_value | int) }}"
          - condition: template
            value_template: >-
              {% if scene_toggle_helper != [] %}
                {{ is_state(scene_toggle_helper, 'on') }}
              {% endif %}
      - condition: and
        conditions:
          - "{{ (include_ambient == 'ambient_enabled') and ( ambient_light_options == 'ambient_light_option_enabled' ) }}"
          - condition: template
            value_template: >-
              {% if scene_toggle_helper != [] %}
                {{ is_state(scene_toggle_helper, 'on') }}
              {% endif %}
      - condition: trigger
        id: 
          - 't2'
          - 't3'
          - 't7'

action:
  - choose:
    - alias: "Check trigger intermission is enabled and preform the correct actions"
      conditions:
        - condition: trigger
          id: 't1'
      sequence:
        - alias: "Wait the number of seconds set in the time delay"
          delay: !input time_delay
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ crossover_light }}"
                data:
                  transition: "{{ transition_off_value }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
                data:
                  transition: "{{ transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ crossover_light }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ crossover_switch }}"
        - choose:
          - alias: "Set the transition for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in intermission_include_light_control) and ('use_brightness' not in intermission_include_light_control) and ('use_colour_temperature' not in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  transition: "{{ intermission_transition_on_value }}"
          - alias: "Set the transition and brightness for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in intermission_include_light_control) and ('use_brightness' in intermission_include_light_control) and ('use_colour_temperature' not in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  transition: "{{ intermission_transition_on_value }}"
                  brightness_pct: "{{ intermission_brightness_value }}"
          - alias: "Set the transition and colour temperature for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in intermission_include_light_control) and ('use_brightness' not in intermission_include_light_control) and ('use_colour_temperature' in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  transition: "{{ intermission_transition_on_value }}"
                  kelvin: "{{intermission_temperature_value}}"
          - alias: "Set the transition, brightness and colour temperature for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in intermission_include_light_control) and ('use_brightness' in intermission_include_light_control) and ('use_colour_temperature' in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  transition: "{{ intermission_transition_on_value }}"
                  brightness_pct: "{{ intermission_brightness_value }}"
                  kelvin: "{{intermission_temperature_value}}"
          - alias: "Set the brightness for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in intermission_include_light_control) and ('use_brightness' in intermission_include_light_control) and ('use_colour_temperature' not in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  brightness_pct: "{{ intermission_brightness_value }}"
          - alias: "Set the colour temperature for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in intermission_include_light_control) and ('use_brightness' not in intermission_include_light_control) and ('use_colour_temperature' in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  kelvin: "{{intermission_temperature_value}}"
          - alias: "Set the brightness and colour temperature for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in intermission_include_light_control) and ('use_brightness' in intermission_include_light_control) and ('use_colour_temperature' in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  brightness_pct: "{{ intermission_brightness_value }}"
                  kelvin: "{{intermission_temperature_value}}"
          - alias: "Set the default for the normal lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in intermission_include_light_control) and ('use_brightness' not in intermission_include_light_control) and ('use_colour_temperature' not in intermission_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ intermission_light_entities_off }}"
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in intermission_include_light_control }}"
            sequence:
              - alias: "Turn on the scenes"
                service: scene.turn_on
                target:
                  entity_id: "{{ intermission_scene_entities }}"
                data:
                  transition: "{{ intermission_transition_on_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in intermission_include_light_control }}"
            sequence:
              - alias: "Turn on the scenes"
                service: scene.turn_on
                target:
                  entity_id: "{{ intermission_scene_entities }}"
        - alias: "Turn on the switches"
          service: switch.turn_on
          target:
            entity_id: "{{ intermission_switch_entities_off }}"
        - alias: "Wait until trigger is off"
          wait_for_trigger:
            platform: state
            entity_id: !input trigger_entities
            to: !input trigger_off_state
        - alias: "Wait the number of seconds set in the time delay"
          delay: !input time_delay
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in intermission_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ intermission_light_entities }}"
                data:
                  transition: "{{ intermission_transition_off_value }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input intermission_end_scenes
                data:
                  transition: "{{ intermission_transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in intermission_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ intermission_light_entities }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input intermission_end_scenes
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ intermission_switch_entities }}"
        - choose:
          - alias: "Check if end turn ON is enable & option Enable to create a snapshot - Lights - Switches"
            conditions:
              - condition: template
                value_template: "{{ include_end_turn_on == 'enable_end_turn_on_snapshot' }}"
              - condition: state
                entity_id: !input end_snapshot_helper
                state: "on"
            sequence:
              - alias: "turn on the scene created"
                service: scene.turn_on
                target:
                  entity_id: "scene.{{end_snapshot_name }}"
              - alias: "Turn on end snapshot helper"
                service: homeassistant.turn_off
                entity_id: !input end_snapshot_helper
          - alias: "Check if end turn ON is enable & option Enable to turn ON - Lights - Switches - Scenes"
            conditions:
              - condition: template
                value_template: "{{ include_end_turn_on == 'enable_end_turn_on' }}"
            sequence:
              - choose:
                - alias: "Set the transition for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                - alias: "Set the transition and brightness for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        brightness_pct: "{{ end_brightness_value }}"
                - alias: "Set the transition and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the transition, brightness and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        brightness_pct: "{{ end_brightness_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the brightness for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        brightness_pct: "{{ end_brightness_value }}"
                - alias: "Set the colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the brightness and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        brightness_pct: "{{ end_brightness_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the default for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
              - choose:
                - alias: "If transition is selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' in end_include_light_control }}"
                  sequence:
                    - alias: "Turn on the end scenes"
                      service: scene.turn_on
                      target:
                        entity_id: "{{ end_scene_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                - alias: "If transition is not selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' not in end_include_light_control }}"
                  sequence:
                    - alias: "Turn on the end scenes"
                      service: scene.turn_on
                      target:
                        entity_id: "{{ end_scene_entities }}"
              - alias: "Turn on the end switches"
                service: switch.turn_on
                target:
                  entity_id: "{{ end_switch_entities_off }}"
        - choose:
          - alias: "Check if automation link is enable"
            conditions:
              - condition: template
                value_template: "{{ include_automation_link == 'enable_automation_link' }}"
              - condition: state
                entity_id: !input automation_link
                match: any
                state: "on"
            sequence:
              - service: homeassistant.turn_off
                entity_id: !input automation_link
        - choose:
          - alias: "Check if ambient is enable"
            conditions:
              - condition: template
                value_template: "{{ include_ambient == 'ambient_enabled' }}"
              - condition: state
                entity_id: !input scene_toggle_helper
                state: "on"
            sequence:
              - alias: "Turn off the boolean for scenes"
                service: input_boolean.turn_off
                data:
                  entity_id: !input scene_toggle_helper
        - stop: "Stop the automation"
    - alias: "By-pass is turned on & check by-pass option - bypass enabled linked automations"
      conditions:
        - condition: trigger
          id: 't2'
        - "{{ (include_bypass == 'bypass_enabled_linked_automations') }}"
      sequence:
        - service: homeassistant.turn_on
          entity_id: !input automation_link
        - stop: "Stop the automation"
    - alias: "By-pass is turned on  & check by-pass option - enabled pause automation"
      conditions:
        - condition: trigger
          id: 't2'
        - "{{ (include_bypass == 'bypass_enabled_pause_automation') }}"
      sequence:
        - stop: "Stop the automation"
    - alias: "By-pass is turned on & turn off automation - or - trigger by rise in sun or ambient"
      conditions:
        - condition: or
          conditions:
            - alias: "Triggered by intermission"
              condition: and
              conditions:
                - condition: trigger
                  id: 't2'
                - "{{ (include_bypass == 'bypass_enabled_turn_off_automations') }}"
            - alias: "Triggered by sun or ambient and check intermission"
              condition: and
              conditions:
                - condition: or
                  conditions:
                    - condition: trigger
                      id: 
                        - 't5'
                        - 't7'
      sequence:
        - alias: "Wait the number of seconds set in the time delay"
          delay: !input time_delay
        - choose:
          - alias: "Check trigger intermission is enabled and turn intermission lights off"
            conditions:
              - condition: template
                value_template: "{{ 'intermission_enable' in include_intermission }}"
            sequence:
              - choose:
                - alias: "If transition is selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' in intermission_include_light_control }}"
                  sequence:
                    - alias: "Turn off the lights"
                      service: light.turn_off
                      target:
                        entity_id: "{{ crossover_intermission_light }}"
                      data:
                        transition: "{{ intermission_transition_off_value }}"
                    - alias: "Turn off the scenes"
                      service: scene.turn_on
                      entity_id: !input intermission_end_scenes
                      data:
                        transition: "{{ intermission_transition_off_value }}"
                - alias: "If transition is not selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' not in intermission_include_light_control }}"
                  sequence:
                    - alias: "Turn off the lights"
                      service: light.turn_off
                      target:
                        entity_id: "{{ crossover_intermission_light }}"
                    - alias: "Turn off the scenes"
                      service: scene.turn_on
                      entity_id: !input intermission_end_scenes
              - alias: "Turn off the switches"
                service: switch.turn_off
                target:
                  entity_id: "{{ crossover_intermission_switch }}"
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ light_entities }}"
                data:
                  transition: "{{ transition_off_value }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
                data:
                  transition: "{{ transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ light_entities }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ switch_entities }}"
        - choose:
          - alias: "Check if automation link is enable"
            conditions:
              - condition: template
                value_template: "{{ include_automation_link == 'enable_automation_link' }}"
            sequence:
              - service: homeassistant.turn_off
                entity_id: !input automation_link
        - choose:
          - alias: "Check if ambient is enable"
            conditions:
              - condition: template
                value_template: "{{ include_ambient == 'ambient_enabled' }}"
              - condition: state
                entity_id: !input scene_toggle_helper
                state: "on"
            sequence:
              - alias: "Turn off the boolean for scenes"
                service: input_boolean.turn_off
                data:
                  entity_id: !input scene_toggle_helper
        - choose:
          - alias: "Check if end turn ON is enable & option Enable to create a snapshot - Lights - Switches"
            conditions:
              - condition: template
                value_template: "{{ include_end_turn_on == 'enable_end_turn_on_snapshot' }}"
              - condition: state
                entity_id: !input end_snapshot_helper
                state: "on"
            sequence:
              - alias: "turn on the scene created"
                service: scene.turn_on
                target:
                  entity_id: "scene.{{end_snapshot_name }}"
              - alias: "Turn on end snapshot helper"
                service: homeassistant.turn_off
                entity_id: !input end_snapshot_helper
          - alias: "Check if end turn ON is enable & option Enable to turn ON - Lights - Switches - Scenes"
            conditions:
              - condition: template
                value_template: "{{ include_end_turn_on == 'enable_end_turn_on' }}"
            sequence:
              - choose:
                - alias: "Set the transition for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                - alias: "Set the transition and brightness for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        brightness_pct: "{{ end_brightness_value }}"
                - alias: "Set the transition and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the transition, brightness and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        transition: "{{ end_transition_on_value }}"
                        brightness_pct: "{{ end_brightness_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the brightness for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        brightness_pct: "{{ end_brightness_value }}"
                - alias: "Set the colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the brightness and colour temperature for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
                      data:
                        brightness_pct: "{{ end_brightness_value }}"
                        kelvin: "{{end_temperature_value}}"
                - alias: "Set the default for the end lights switch"
                  conditions:
                    - condition: template
                      value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
                  sequence:
                    - service: light.turn_on
                      target:
                        entity_id: "{{ end_light_entities }}"
              - choose:
                - alias: "If transition is selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' in end_include_light_control }}"
                  sequence:
                    - alias: "Turn on the end scenes"
                      service: scene.turn_on
                      target:
                        entity_id: "{{ end_scene_entities }}"
                      data:
                        transition:  "{{ end_transition_on_value }}"
                - alias: "If transition is not selected"
                  conditions:
                    - condition: template
                      value_template: "{{ 'use_transition' not in end_include_light_control }}"
                  sequence:
                    - alias: "Turn on the end scenes"
                      service: scene.turn_on
                      target:
                        entity_id: "{{ end_scene_entities }}"
              - alias: "Turn on the end switches"
                service: switch.turn_on
                target:
                  entity_id: "{{ end_switch_entities_off }}"
        - stop: "Stop the automation"
    - alias: "By-pass is turned off  & check if the trigger is off"
      conditions:
        - condition: trigger
          id: 't3'
        - condition: state
          entity_id: !input trigger_entities
          match: any
          state: !input trigger_off_state
      sequence:
        - alias: "Wait the number of seconds set in the time delay"
          delay: !input time_delay
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ light_entities }}"
                data:
                  transition: "{{ transition_off_value }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
                data:
                  transition: "{{ transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ light_entities }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input end_scenes
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ switch_entities }}"
        - choose:
          - alias: "Check if automation link is enable"
            conditions:
              - condition: template
                value_template: "{{ include_automation_link == 'enable_automation_link' }}"
            sequence:
              - service: homeassistant.turn_off
                entity_id: !input automation_link
        - choose:
          - alias: "Check if ambient is enable"
            conditions:
              - condition: template
                value_template: "{{ include_ambient == 'ambient_enabled' }}"
              - condition: state
                entity_id: !input scene_toggle_helper
                state: "on"
            sequence:
              - alias: "Turn off the boolean for scenes"
                service: input_boolean.turn_off
                data:
                  entity_id: !input scene_toggle_helper
        - stop: "Stop the automation"
  - choose:
    - alias: "Check end light switch, create a snapshot is enabled and create a snapshot of the entities in end light switch"
      conditions:
        - condition: template
          value_template: "{{ include_end_turn_on == 'enable_end_turn_on_snapshot' }}"
        - condition: state
          entity_id: !input end_snapshot_helper
          state: "off"
      sequence:
        - alias: "Create a snapshot of end lights & switches"
          service: scene.create
          data:
            scene_id: !input end_snapshot_name
            snapshot_entities: "{{ end_scene_create }}"
        - alias: "Turne on end snapshot helper"
          service: homeassistant.turn_on
          entity_id: !input end_snapshot_helper
  - choose:
    - alias: "Check turn off lights & switches is enabled and turn off lights that are on"
      conditions:
        - condition: template
          value_template: "{{ include_start_turn_off == 'enable_start_turn_off' }}"
      sequence:
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in off_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ off_light_entities_on }}"
                data:
                  transition: "{{ off_transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in off_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ off_light_entities_on }}"
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ off_switch_entities_on }}"
  - choose:
    - alias: "Check trigger intermission is enabled and turn intermission lights off"
      conditions:
        - condition: template
          value_template: "{{ 'intermission_enable' in include_intermission }}"
      sequence:
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in intermission_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ crossover_intermission_light }}"
                data:
                  transition: "{{ intermission_transition_off_value }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input intermission_end_scenes
                data:
                  transition: "{{ intermission_transition_off_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in intermission_include_light_control }}"
            sequence:
              - alias: "Turn off the lights"
                service: light.turn_off
                target:
                  entity_id: "{{ crossover_intermission_light }}"
              - alias: "Turn off the scenes"
                service: scene.turn_on
                entity_id: !input intermission_end_scenes
        - alias: "Turn off the switches"
          service: switch.turn_off
          target:
            entity_id: "{{ crossover_intermission_switch }}"
  - choose:
    - alias: "Check if automation link is enable"
      conditions:
        - condition: template
          value_template: "{{ include_automation_link == 'enable_automation_link' }}"
        - condition: state
          entity_id: !input automation_link
          match: any
          state: "off"
      sequence:
        - service: homeassistant.turn_on
          entity_id: !input automation_link
        - alias: "We need a delay for the automation link to work if different lights are used and by-pass selection is OFF"
          delay: 0.1
  - choose:
    - alias: "Check if ambient is enable"
      conditions:
        - condition: template
          value_template: "{{ include_ambient == 'ambient_enabled' }}"
        - condition: state
          entity_id: !input scene_toggle_helper
          state: "off"
      sequence:
        - alias: "Turn off the boolean for scenes"
          service: input_boolean.turn_on
          data:
            entity_id: !input scene_toggle_helper
  - choose:
    - alias: "Set the transition for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' in include_light_control) and ('use_brightness' not in include_light_control) and ('use_colour_temperature' not in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            transition: "{{ transition_on_value }}"
    - alias: "Set the transition and brightness for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' in include_light_control) and ('use_brightness' in include_light_control) and ('use_colour_temperature' not in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            transition: "{{ transition_on_value }}"
            brightness_pct: "{{ brightness_value }}"
    - alias: "Set the transition and colour temperature for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' in include_light_control) and ('use_brightness' not in include_light_control) and ('use_colour_temperature' in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            transition: "{{ transition_on_value }}"
            kelvin: "{{temperature_value}}"
    - alias: "Set the transition, brightness and colour temperature for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' in include_light_control) and ('use_brightness' in include_light_control) and ('use_colour_temperature' in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            transition: "{{ transition_on_value }}"
            brightness_pct: "{{ brightness_value }}"
            kelvin: "{{temperature_value}}"
    - alias: "Set the brightness for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' not in include_light_control) and ('use_brightness' in include_light_control) and ('use_colour_temperature' not in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            brightness_pct: "{{ brightness_value }}"
    - alias: "Set the colour temperature for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' not in include_light_control) and ('use_brightness' not in include_light_control) and ('use_colour_temperature' in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            kelvin: "{{temperature_value}}"
    - alias: "Set the brightness and colour temperature for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' not in include_light_control) and ('use_brightness' in include_light_control) and ('use_colour_temperature' in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
          data:
            brightness_pct: "{{ brightness_value }}"
            kelvin: "{{temperature_value}}"
    - alias: "Set the default for the normal lights switch"
      conditions:
        - condition: template
          value_template: "{{ ('use_transition' not in include_light_control) and ('use_brightness' not in include_light_control) and ('use_colour_temperature' not in include_light_control) }}"
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ light_entities }}"
  - choose:
    - alias: "If transition is selected"
      conditions:
        - condition: template
          value_template: "{{ 'use_transition' in include_light_control }}"
      sequence:
        - alias: "Turn on the scenes"
          service: scene.turn_on
          target:
            entity_id: "{{ scene_entities }}"
          data:
            transition: "{{ transition_on_value }}"
    - alias: "If transition is not selected"
      conditions:
        - condition: template
          value_template: "{{ 'use_transition' not in include_light_control }}"
      sequence:
        - alias: "Turn on the scenes"
          service: scene.turn_on
          target:
            entity_id: "{{ scene_entities }}"
  - alias: "Turn on the switches"
    service: switch.turn_on
    target:
      entity_id: "{{ switch_entities }}"
  - choose:
    - alias: "By-pass is turned on  & turn on automation"
      conditions:
        - condition: trigger
          id: 't2'
        - "{{ (include_bypass == 'bypass_enabled_turn_on_automations') }}"
      sequence:
        - stop: "Stop the automation"
  - alias: "Wait until trigger is off"
    wait_for_trigger:
      platform: state
      entity_id: !input trigger_entities
      to: !input trigger_off_state
  - alias: "Wait the number of seconds set in the time delay"
    delay: !input time_delay
  - choose:
    - alias: "If transition is selected"
      conditions:
        - condition: template
          value_template: "{{ 'use_transition' in include_light_control }}"
      sequence:
        - alias: "Turn off the lights"
          service: light.turn_off
          target:
            entity_id: "{{ light_entities }}"
          data:
            transition:  "{{ transition_off_value }}"
        - alias: "Turn off the scenes"
          service: scene.turn_on
          entity_id: !input end_scenes
          data:
            transition: "{{ transition_off_value }}"
    - alias: "If transition is not selected"
      conditions:
        - condition: template
          value_template: "{{ 'use_transition' not in include_light_control }}"
      sequence:
        - alias: "Turn off the lights"
          service: light.turn_off
          target:
            entity_id: "{{ light_entities }}"
        - alias: "Turn off the scenes"
          service: scene.turn_on
          entity_id: !input end_scenes
  - alias: "Turn off the switches"
    service: switch.turn_off
    target:
      entity_id: "{{ switch_entities }}"
  - choose:
    - alias: "Check if end turn ON is enable & option Enable to create a snapshot - Lights - Switches"
      conditions:
        - condition: template
          value_template: "{{ include_end_turn_on == 'enable_end_turn_on_snapshot' }}"
        - condition: state
          entity_id: !input end_snapshot_helper
          state: "on"
      sequence:
        - alias: "turn on the scene created"
          service: scene.turn_on
          target:
            entity_id: "scene.{{end_snapshot_name }}"
        - alias: "Turn on end snapshot helper"
          service: homeassistant.turn_off
          entity_id: !input end_snapshot_helper
    - alias: "Check if end turn ON is enable & option Enable to turn ON - Lights - Switches - Scenes"
      conditions:
        - condition: template
          value_template: "{{ include_end_turn_on == 'enable_end_turn_on' }}"
      sequence:
        - choose:
          - alias: "Set the transition for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  transition: "{{ end_transition_on_value }}"
          - alias: "Set the transition and brightness for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  transition: "{{ end_transition_on_value }}"
                  brightness_pct: "{{ end_brightness_value }}"
          - alias: "Set the transition and colour temperature for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  transition: "{{ end_transition_on_value }}"
                  kelvin: "{{end_temperature_value}}"
          - alias: "Set the transition, brightness and colour temperature for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  transition: "{{ end_transition_on_value }}"
                  brightness_pct: "{{ end_brightness_value }}"
                  kelvin: "{{end_temperature_value}}"
          - alias: "Set the brightness for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  brightness_pct: "{{ end_brightness_value }}"
          - alias: "Set the colour temperature for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  kelvin: "{{end_temperature_value}}"
          - alias: "Set the brightness and colour temperature for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' in end_include_light_control) and ('use_colour_temperature' in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
                data:
                  brightness_pct: "{{ end_brightness_value }}"
                  kelvin: "{{end_temperature_value}}"
          - alias: "Set the default for the end lights switch"
            conditions:
              - condition: template
                value_template: "{{ ('use_transition' not in end_include_light_control) and ('use_brightness' not in end_include_light_control) and ('use_colour_temperature' not in end_include_light_control) }}"
            sequence:
              - service: light.turn_on
                target:
                  entity_id: "{{ end_light_entities }}"
        - choose:
          - alias: "If transition is selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' in end_include_light_control }}"
            sequence:
              - alias: "Turn on the end scenes"
                service: scene.turn_on
                target:
                  entity_id: "{{ end_scene_entities }}"
                data:
                  transition: "{{ end_transition_on_value }}"
          - alias: "If transition is not selected"
            conditions:
              - condition: template
                value_template: "{{ 'use_transition' not in end_include_light_control }}"
            sequence:
              - alias: "Turn on the end scenes"
                service: scene.turn_on
                target:
                  entity_id: "{{ end_scene_entities }}"
        - alias: "Turn on the end switches"
          service: switch.turn_on
          target:
            entity_id: "{{ end_switch_entities_off }}"
  - choose:
    - alias: "Check if automation link is enable"
      conditions:
        - condition: template
          value_template: "{{ include_automation_link == 'enable_automation_link' }}"
        - condition: state
          entity_id: !input automation_link
          match: any
          state: "on"
      sequence:
        - service: homeassistant.turn_off
          entity_id: !input automation_link
  - choose:
    - alias: "Check if ambient is enable"
      conditions:
        - condition: template
          value_template: "{{ include_ambient == 'ambient_enabled' }}"
        - condition: state
          entity_id: !input scene_toggle_helper
          state: "on"
      sequence:
        - alias: "Turn off the boolean for scenes"
          service: input_boolean.turn_off
          data:
            entity_id: !input scene_toggle_helper